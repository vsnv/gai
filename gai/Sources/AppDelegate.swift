/*

 –ö–æ—Å—Ç—ã–ª–∏ —á—Ç–æ–± –ø–æ–¥—Ä—É–∂–∏—Ç—å SPM, macOS app –∏ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä—É–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç –≤ Xcode:
 https://theswiftdev.com/how-to-build-macos-apps-using-only-the-swift-package-manager/

 –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç ChatGPT:

 –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤ –æ–±—Ö–æ–¥ Xcode, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ SPM –∏ –≤–∞—à –ª—é–±–∏–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä.
 –û–¥–Ω–∞–∫–æ, –∫–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç—å–µ, —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:

 - –ü–æ–¥–∞—á–∞ –≤ Mac App Store: –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Mac App Store –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Xcode –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.
 - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏: –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö API –∏–ª–∏ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 - –†–µ—Å—É—Ä—Å—ã: –•–æ—Ç—è SPM –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å –≤–µ—Ä—Å–∏–∏ Swift 5.3, –∏—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —É–¥–æ–±–Ω—ã–º, —á–µ–º –≤ Xcode.

 */

import AppKit
import SwiftUI
import ComposableArchitecture
import CommandsTree

final class WindowDelegate: NSObject, NSWindowDelegate {
    func windowWillClose(_ notification: Notification) {
        NSApplication.shared.terminate(0)
    }
}

final class AppDelegate: NSObject, NSApplicationDelegate {
    private let window = NSWindow()
    private let windowDelegate = WindowDelegate()

    private lazy var store = Store(
        initialState: GaiFeature.State(),
        reducer: {
            GaiFeature()
        }
    )

    private lazy var gaiView = GaiView(store: store)
    private let rootCommandParameter: String

    init(rootCommandParameter: String) {
        self.rootCommandParameter = rootCommandParameter
    }

    func applicationDidFinishLaunching(_ notification: Notification) {
        let appMenu = NSMenuItem()
        appMenu.submenu = NSMenu()
        appMenu.submenu?.addItem(NSMenuItem(title: "Quit", action: #selector(NSApplication.terminate(_:)), keyEquivalent: "q"))
        let mainMenu = NSMenu(title: "gai")
        mainMenu.addItem(appMenu)
        NSApplication.shared.mainMenu = mainMenu

        let size = CGSize(
            width: 800,
            height: 800
        )
        window.setContentSize(size)
        window.styleMask = [.closable, .miniaturizable, .resizable, .titled]
        window.delegate = windowDelegate
        window.title = "gai üöì"

        let view = NSHostingView(rootView: gaiView)
        view.frame = CGRect(origin: .zero, size: size)
        view.autoresizingMask = [.height, .width]
        window.contentView!.addSubview(view)
        window.makeKeyAndOrderFront(view)
        window.center()

        NSApp.setActivationPolicy(.regular)
        NSApp.activate(ignoringOtherApps: true)

        store.send(.appLaunched(rootCommandParameter: rootCommandParameter))
    }

    func applicationWillTerminate(_ notification: Notification) {
        store.send(.appWillTerminate)
    }
}
