import AppKit
import ArgumentParser

struct LaunchArgs: ParsableArguments {
    @Argument(
        help: "–†—É—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∏–º UI. –ù–∞–ø—Ä–∏–º–µ—Ä, `ai`."
    )
    var rootCommand: String

    @Option(
        name: .shortAndLong,
        help: "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥—ã."
    )
    var directory: String?
//
//    @Option(
//        help: "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å"
//    )
//    var parseDirectory: String?
}

final class MainCommand: ParsableCommand {
    static var configuration: CommandConfiguration = CommandConfiguration(
        abstract: "üöìüöìüöìüöì",
        usage: "gai <root-command>",
        subcommands: []
    )

    @OptionGroup var args: LaunchArgs

    func run() {
        let app = NSApplication.shared
        let delegate = AppDelegate(launchArgs: args)
        app.delegate = delegate
        app.run()
    }
}

MainCommand.main()
